### Ansible : management de deploiement, configuration idempotente ###

Ressources :
command line :
http://docs.ansible.com/ansible/intro_adhoc.html
tout sur les playbooks :
http://docs.ansible.com/ansible/playbooks.html
+ associé aux examples :
https://github.com/ansible/ansible-examples
infos modules :
http://docs.ansible.com/ansible/list_of_all_modules.html
best practices :
http://docs.ansible.com/ansible/playbooks_best_practices.html
deploiement CI :
https://medium.com/@tedchength/basic-deployment-with-ansible-docker-jenkins-and-git-4f3b42fb2f5e
>>> à noter
https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
(lire au moins la solution à la fin)

Arborescence 'best practices':
cf link best practices ou à la fin du fichier
- Dossier important #1 : /etc/ansible/
  contient :
  - Fichier de config d'Ansible : ansible.cfg
  - Fichier de config des hosts : hosts
  - dossier des roles : roles/

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
1) installation

L'installation se fait via apt-get classique
Elements importants: la version de python

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
2) lancement de commandes standard

Prérequis:
- ajouts de un/plusieurs hosts cibles dans fichier repertoire/hosts
- échange de clés SSH (ou ssh-agent) avec le/les serveurs
Test:
$ ansible all -m ping
Echec: pas d'infos dans /etc/ansible/hosts
les hosts sont renseignés dans ~/prog/ansible/premiere_appli/hosts
on relance la commande avec -i fichier
cmd:
$ ansible all -m ping -i ~/prog/ansible/premiere_appli/hosts
Echec: il trouve bien le RaspberryPi mais ne peut s'y connecter. En effet, il
se connecte par défaut avec le même user.
On va donc changer avec l'option -u user:
$ ansible all -m ping -i ~/prog/ansible/premiere_appli/hosts -u pi
Success !

Le format est donc
$ ansible host(s) -m module -a arguments options
- pour lancer une commande:
  $ ansible host -a "/bin/echo hello"
- pour lancer une commande en passant sudo
  $ ansible host -a "/bin/echo hello" -b (b pour become)
  force ansible a demander le mot de passe: --ask-become-pass ou -K
  Exemple:
  $ ansible rpi -i hosts -m apt -a "update_cache=yes" -u pi
  Echec: pas de droits "Fail to lock for exclusive operation"
  $ ansible rpi -i hosts -m apt -a "update_cache=yes" -u pi -b
  Succes: user 'pi' a des droits en sudo sans mdp
modules intéressant pour les commandes en 'live' :
- ping
- copy. -m copy -a "src=/path/to dest=/path/file"
- file. modifie des attibuts: -m file -a "dest=/this/file mode=755 owner=user"
  (creation de repertoire avec state=directory, delete avec state=absent)
- service. -m service -a "name=apache2 state=started(restarted,stopped,reloaded,running)
- user. creat/modif/del de user. -m user -a "name=user password=xyz"
- command. Evite de se tapper tout le chemin avec -a; ex: -m command -a "ls"
  options intéressantes pour l'idempotence, ex:
  -m command -a "/path/to/file.sh arg1 arg2 creates=file"
  creates=file: file existe => pas de run
  removes=file: file n'existe pas => pas de run
  (penser: la commande passée créer le fichier, donc pas besoin de refaire)
- shell. comme commande mais accepte redirection, variables, ... (creates et removes marchent)
- script. execute le script après l'avoir copié sur le remote

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
3) les playbooks

le playbooks est un receuil de plays. Chaque play concerne un/des hosts et un remote_user
Ensuite, on défini des tâches: tasks
La structure de base est donc définie de la sorte:
- hosts: server
  remote_user: yourname
  tasks:
    - name: test de connection
      ping:
On lance ainsi le nouveau fichier playbook.yml:
$ ansible-playbook -i hosts playbook.yml
Et voilà, c'est parti !

On liste ainsi une liste de tâches à accomplir. Elles seront déroulées sur tous
les serveurs listé dans "hosts". A la suite on peut changer de host, on repart sur
un nouveau play avec nouvel host, nouvel user et nouvelles tasks

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
4) les plays : détails

- passer par sudo sur son play:
  tasks:
    - name: apache is started
      service: name=apache2 status=started
      become: yes

- passer une liste de variables:
tasks:
  - name install générale
    apt: name={{ item }} update_cache=yes state=latest
    with_items:
      - vim
      - git
      - htop
      ...

- modifier une ligne dans un fichier (sed !!)
  - name: Remplacer ma valeur
    lineinfile:
      dest: /path/to/file
      regexp: 'string\sto\sfind'
      line: 'whatever {{ var_une }}'
  (cette syntaxe est equivalente à dest=/.. regexp=... sur une seule ligne)

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
5) les handlers

Lorsqu'une tâche s'execute, il peut y avoir besoin de faire quelque chose en réaction,
mais pas à chaque passe. Exemple: changement d'un fichier de config, qui nécessite
un restart apache. On veut un restart seulement si le fichier change, pas à chaque passe.
On va utiliser le systeme de handler.
Sur notre tache on attache un notify:
tasks:
  - name: template config file
    template: src=template.j2 dest=/path/to/file
    notify:
      - restart apache
          ( à noter que template peut prendre les variables du playbook)
On place les handlers sur la même indentation que les tasks:
handlers:
  - name: restart apache (nom dans notify = nom du handler)
    service: name=apache2 status=restarted
    become: yes

Ou on passe par un systeme de listen:
la task passe un notify: "message to listen"
le handler est alors de la forme:
- name: restart apache (nom dans notify = nom du handler)
  service: name=apache2 status=restarted
  listen: "message to listen"
  become: yes
On peut définir ainsi plusieurs handlers pour une tache sans tout lister

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
6) Les roles

Une fois une liste de plays longue comme le bras, il est temps de définir des roles.
Les roles permettent de gérer un 'type' de config.
Par exemple si dans le playbook utilisés il y a 3 parties:
apt update + installs diverses
creation/modification d'un utilisateur
clone de depot git

On va couper ces taches en 3 roles: update_init, user, clone_git
Dans le répertoire contenant le playbook et hosts, créer un dossier role.
L'arbo au final:
roles/
    update_init/
        tasks/
            main.yml
    user/
        tasks/
            main.yml
    clone_git/
        tasks/
            main.yml

Avec dans chaque main.yml le contenu des tasks respectives:
- name: test
  ping:
- name ...

Ensuite, dans le fichier principal (playbook.yml), on passe de:
tasks:
  - ...

  - ...
à:
roles:
  - update_init
  - user
  - clone_git

Tada!
De la même maniere que définir des tasks pour un role, on peut définir également
des handlers. Sous le dossier-nom du role, à coté du dossier tasks, créer le
dossier handlers puis handlers/main.yml, fichier à remplir de la même maniere que
tasks/main.yml
Idem pour les templates.

Include
Si dans les vars du playbook, on a une liste de vars ()
on peut créer un fichier.yml à côté du main.yml avec les tasks à effectuer
sur chaque item de cette liste, et on passe la liste depuis le main. Exemple
playbook.yml:
- hosts: serveurs
  remote_user: root
  vars:
    domains:
      - domaine1
      - domaine2
tasks/main.yml
- name: tasks sur chaque domaine
  include: fichier.yml
  with_items: domains
tasks/fichier.yml
- name: task1
  truc: ...{{ item }}...quelquechose
