### Docker : gestion de container pour deploiement d'applications ###

IMPORTANT : toutes les commandes docker passent par sudo !!!!

Ressources :
Installation : https://docs.docker.com/engine/installation/linux/ubuntu/
Repo docker - image de apache+php : https://hub.docker.com/_/php/
reference dockerfile : https://docs.docker.com/engine/reference/builder/

Utiles :
Dockerfile > docker build > docker run

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
1) installation

Suite de lancements :
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo apt-key fingerprint 0EBFCD88
$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
$ sudo apt-get update
$ sudo apt-get install docker-ce
# on vérifie que ça marche : docker va chercher une image 'hello-world' sur
son repo (le docker hub) et la faire tourner pour vérifer la config.
$ sudo docker run hello-world

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
2) Creation d'un custom container

Creation d'un dossier + sous-dossier source :

$ mkdir -p applitest1/src
--> creation d'un fichier applitest1/src/index.php contenant echo whatever
--> creation d'un fichier applitest1/Dockerfile
le Dockerfile contient les éléments qui permettront à Docker de créer son container

Contenu :
FROM php:7.0-apache
COPY src/ /var/www/html/
EXPOSE 80

FROM -- permet de définir une image Docker de base, trouvée sur docker hub.
associé à l'image il y a des conseils de déploiements, de l'aide, ...
COPY -- permet de copier le contenu de scr (index.php) dans l'autre dossier,
en l'occurence le dossier de présentation de Apache
EXPOSE -- permet d'ouvrir un port vers l'exterieur
CMD -- permet de lancer une commande a éxécuter une fois que le container est
déployé. Ex: pour apache/php c'est "apache2-foreground". A placé en dernier.

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
2) Build d'une nouvelle image

Sur la base d'une image existante (php:7.0-apache ici), on construit
une nouvelle image en ajoutant des éléments.
- Build:
  $ sudo docker build <options> <path>
  option intéressante: -t pout tag permet de donner un nom à cette image
  path: mettre . si Dockerfile est dans le répertoire

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
3) Run d'une image

Lancement du container !
- run de base:
  $ sudo docker run <ID ou nom de l'image>
- run avec port exposé (80 pour apache par ex):
  $ sudo docker run -p 80:80 <ID ou nom de l'image>
  permet de mapper port de l'hote : port du container
  ainsi sur localhost:80, on a accès au container
- run avec mount de dossier:
  $ sudo docker run -v /host/path/to/src:/container/path <ID ou nom de l'image>
  permet de partage par ex son répertoire local où sont changer les fichiers
  avec le serveur de pres (/var/www/html pour apache). Ainsi, à chaque chgmt
  de fichiers, pas besoin de relancer de container.

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
4)

possible :
-- dans le repertoire contenant le Dockerfile à copier
$ sudo docker build -q .
output : sha256:b7gUIU56Cctr45............hjbK
tres long. copier ça et
$ sudo docker run -p 80:80 b7gUIU56Cctr45............hjbK
lance effectivement un container
tenter :
$ id_cont=$(sudo docker build -q . | cut -d':' -f2)
NB: -q pour quiet, doit seulement sortir l'ID => pas besoin de cut
$ sudo docker run -p 80:80 $id_cont

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
Gestion des containers

- Voir les container qui tournent:
  $ sudo docker ps
- Voir les container qui ont été stoppés:
  $ sudo docker ps --filter "status=exited"
- Supprimer les containers arretés:
  $ sudo docker rm $(sudo docker ps --filter "status=exited" -q)
- Run a command in a running container
  $ sudo docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

#~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
Gestion des images

- voir les images installées:
  $ sudo docker images
- chercher sur le hub des images:
  $ sudo docker search <termeAChercher>
- aller chercher des images
  $ sudo docker pull <imageName>
- supprimer une image:
  $ sudo docker rmi <imageID>
